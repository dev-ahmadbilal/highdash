# Cursor Rules for highdash (A modern, type-safe, high-level utility library inspired by Lodash.)

## Project Vision
We are rebuilding lodash from scratch with the help of AI coding agents.  
The goal is not a 1:1 clone, but a **modern, type-safe, tree-shakable, and performance-aware** utility library.  

## General Guidelines
- **Language:** TypeScript (strict mode ON).
- **Imports:** All functions must be **modular** and support tree-shaking.  
  - Example: `import { debounce } from "highdash"`.
- **Compatibility:** Functions should be **API-compatible with lodash** where it makes sense.  
- **Modern JS:** Prefer ES6+ built-ins (`Array.from`, `Object.entries`, `flatMap`, etc.) over re-implementing them.  
- **Benchmarks:** For performance-sensitive functions, add benchmarks and compare with lodash.  
- **Testing:** Every function must have 100% test coverage with Jest/Vitest.  

## Prioritization
Start with **most-used lodash functions**, grouped by category:

### Phase 1: Core
- `debounce`
- `throttle`
- `cloneDeep`
- `merge`
- `uniq`
- `groupBy`

### Phase 2: Collections
- `keyBy`
- `partition`
- `mapValues`
- `pick`, `omit`

### Phase 3: Utility
- `isEqual`
- `isEmpty`
- `isNil`

### Phase 4: Advanced
- Chaining utilities (if needed)
- Lazy evaluation (optional, only if beneficial)

## Coding Standards
- Always prefer **readability** over micro-optimizations unless proven by benchmarks.
- Functions must be **pure** (no side effects).
- Use **ESNext features**: optional chaining, nullish coalescing, `Set/Map` where possible.
- Provide **rich TypeScript typings**, including generics.
- Ensure functions are **side-by-side testable** against lodash for output equivalence.

## Repository Structure
/src
/array
/collection
/object
/function
/lang
/tests
/benchmarks
/docs

## Contribution Workflow
1. Pick a lodash function.
2. Check if modern JS already provides it. If yes, skip or wrap with a warning.
3. Write TypeScript implementation.
4. Write tests (input/output parity with lodash).
5. Add performance benchmark (optional).
6. Document usage and differences from lodash.

## Future Goals
- Provide **Esm + CJS builds**.
- Maintain **zero dependencies**.
- Optionally generate **typed docs** automatically.
- Website with usage examples and benchmarks.

---