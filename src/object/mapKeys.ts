/**
 * Creates an object with the same values as `object` and keys generated by running each own enumerable string keyed property of `object` through `iteratee`.
 * The iteratee is invoked with three arguments: (value, key, object).
 *
 * @param object - The object to iterate over
 * @param iteratee - The function invoked per iteration
 * @returns Returns the new mapped object
 *
 * @example
 * ```typescript
 * mapKeys({ 'a': 1, 'b': 2 }, (value, key) => key + value);
 * // => { 'a1': 1, 'b2': 2 }
 * ```
 */
export function mapKeys<T extends Record<string, unknown>>(
  object: T,
  iteratee: ((value: T[keyof T], key: keyof T, object: T) => string) | keyof T,
): Record<string, T[keyof T]> {
  if (!object || typeof object !== 'object') {
    return {}
  }

  const result: Record<string, T[keyof T]> = {}

  for (const key in object) {
    if (Object.hasOwn(object, key)) {
      const value = object[key]
      const newKey =
        typeof iteratee === 'function'
          ? (iteratee as (v: T[keyof T], k: keyof T, o: T) => string)(value, key as keyof T, object)
          : String((value as any)[iteratee as string])
      result[newKey] = value
    }
  }

  return result
}
