/**
 * Creates an object with the same keys as `object` and values generated by running each own enumerable string keyed property of `object` through `iteratee`.
 * The iteratee is invoked with three arguments: (value, key, object).
 *
 * @param object - The object to iterate over
 * @param iteratee - The function invoked per iteration
 * @returns Returns the new mapped object
 *
 * @example
 * ```typescript
 * const users = {
 *   'fred': { 'user': 'fred', 'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 * mapValues(users, o => o.age);
 * // => { 'fred': 40, 'pebbles': 1 }
 * ```
 */
export function mapValues<T, U>(
  object: Record<string, T>,
  iteratee: (value: T, key: string, object: Record<string, T>) => U,
): Record<string, U> {
  const result: Record<string, U> = {};

  if (!object || typeof object !== 'object') {
    return result;
  }

  for (const key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      result[key] = iteratee(object[key], key, object);
    }
  }

  return result;
}
